<bugs>
    <bug>
        <id>92009</id>
        <developer>Dejan Glozic</developer>
        <dup_id/>
        <creation_time>2005-04-19 18:44:00 -0400</creation_time>
        <product>JDT</product>
        <component>Text</component>
        <short_desc>[nls tooling] Externalize Strings wizard broken</short_desc>
        <thetext>Since we moved to the new NLS format, I cannot externalize strings any more.
            Whenever I open the wizard on a file and check the option to use the new NLS
            format, I get the following error:

            'Some keys are invalid'

            I also get error overlay on a bunch of keys in the checkbox column. I cannot
            work until this is fixed.
        </thetext>
        <comment>
            <comment_id>434079</comment_id>
            <comment_count>1</comment_count>
            <who>Wassim Melhem</who>
            <when>2005-04-19 18:46:56 -0400</when>
            <comment_text>Nothing on heaven or earth can enable the Finish button.</comment_text>
        </comment>
        <comment>
            <comment_id>434087</comment_id>
            <comment_count>2</comment_count>
            <who>Dejan Glozic</who>
            <when>2005-04-19 19:03:23 -0400</when>
            <comment_text>It just sits there, gray and distant.</comment_text>
        </comment>
        <comment>
            <comment_id>434575</comment_id>
            <comment_count>3</comment_count>
            <who>Dani Megert</who>
            <when>2005-04-20 12:39:49 -0400</when>
            <comment_text>Fixed in HEAD. The problem was that we tried to validate keys for IGNORED and
                INTERNALIZED entries.

                Since the re-build already started I won't ask for yet another re-build. If you
                immediately need to use the wizard you can either use upcoming N-build or I can
                send you a patched version of the JDT UI plug-in.
            </comment_text>
        </comment>
        <comment>
            <comment_id>434618</comment_id>
            <comment_count>4</comment_count>
            <who>Wassim Melhem</who>
            <when>2005-04-20 13:09:21 -0400</when>
            <comment_text>thanks. we could just use the cool plug-in export wizard.</comment_text>
        </comment>
        <comment>
            <comment_id>434623</comment_id>
            <comment_count>5</comment_count>
            <who>Dani Megert</who>
            <when>2005-04-20 13:15:56 -0400</when>
            <comment_text>Yes, but if you do so, you have to do the following:
                1. get JDT UI versioned for this weeks I-build (v20050419-0800)
                2. replace ExternalizeStringWizardPage with the latest revision (1.73)
                3. export


                If you take all JDT UI HEAD you will be broken because you are missing some new
                API from Platform Text that got introduced today.
            </comment_text>
        </comment>
        <comment>
            <comment_id>434628</comment_id>
            <comment_count>6</comment_count>
            <who>Dejan Glozic</who>
            <when>2005-04-20 13:20:14 -0400</when>
            <comment_text>Thanks for a quick fix. I suspected it was something simple. I got used to the
                wizard so much that I cannot do without it any more.
            </comment_text>
        </comment>
        <comment>
            <comment_id>436314</comment_id>
            <comment_count>7</comment_count>
            <who>Dani Megert</who>
            <when>2005-04-22 12:34:56 -0400</when>
            <comment_text>*** Bug 92351 has been marked as a duplicate of this bug. ***</comment_text>
        </comment>
    </bug>
    <bug>
        <id>90841</id>
        <developer>DJ Houghton</developer>
        <dup_id/>
        <creation_time>2005-04-08 14:49:00 -0400</creation_time>
        <product>JDT</product>
        <component>Text</component>
        <short_desc>[misc] IllegalStateException in Java editor</short_desc>
        <thetext>build i0405

            I got the following exception in my log file. I believe I did a ctrl-shift-u to
            turn off "mark occurances" (didn't realize that wasn't the right key binding) so
            then I hit the icon and now I get that message everytime I hit the "mark
            occurances" icon.

            It looks like JavaEditor.EclipsePreferencesAdaptor holds onto the preference
            node but this node has been removed. Nodes aren't handles, they are the real
            objects and shouldn't be cached like this.

            !ENTRY org.eclipse.ui.workbench 4 2 2005-04-08 14:43:57.926
            !MESSAGE Problems occurred when invoking code from plug-in:
            "org.eclipse.ui.workbench".
            !STACK 0
            java.lang.IllegalStateException: Preference node "org.eclipse.jdt.core" has been
            removed.
            at
            org.eclipse.core.internal.preferences.EclipsePreferences.checkRemoved(EclipsePreferences.java:146)
            at
            org.eclipse.core.internal.preferences.EclipsePreferences.internalGet(EclipsePreferences.java:501)
            at
            org.eclipse.core.internal.preferences.EclipsePreferences.get(EclipsePreferences.java:362)
            at
            org.eclipse.jdt.internal.ui.javaeditor.JavaEditor$EclipsePreferencesAdapter.contains(JavaEditor.java:362)
            at
            org.eclipse.ui.texteditor.ChainedPreferenceStore.getVisibleStore(ChainedPreferenceStore.java:528)
            at
            org.eclipse.ui.texteditor.ChainedPreferenceStore.handlePropertyChangeEvent(ChainedPreferenceStore.java:412)
            at
            org.eclipse.ui.texteditor.ChainedPreferenceStore.access$0(ChainedPreferenceStore.java:407)
            at
            org.eclipse.ui.texteditor.ChainedPreferenceStore$PropertyChangeListener.propertyChange(ChainedPreferenceStore.java:68)
            at
            org.eclipse.ui.preferences.ScopedPreferenceStore$3.run(ScopedPreferenceStore.java:339)
            at
            org.eclipse.core.internal.runtime.InternalPlatform.run(InternalPlatform.java:1021)
            at org.eclipse.core.runtime.Platform.run(Platform.java:757)
            at
            org.eclipse.ui.preferences.ScopedPreferenceStore.firePropertyChangeEvent(ScopedPreferenceStore.java:336)
            at
            org.eclipse.ui.preferences.ScopedPreferenceStore.setValue(ScopedPreferenceStore.java:736)
            at
            org.eclipse.jdt.internal.ui.javaeditor.ToggleMarkOccurrencesAction.run(ToggleMarkOccurrencesAction.java:54)
            at org.eclipse.jface.action.Action.runWithEvent(Action.java:996)
            at org.eclipse.ui.actions.RetargetAction.runWithEvent(RetargetAction.java:216)
            at org.eclipse.ui.internal.WWinPluginAction.runWithEvent(WWinPluginAction.java:228)
            at
            org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:538)
            at
            org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:488)
            at
            org.eclipse.jface.action.ActionContributionItem$6.handleEvent(ActionContributionItem.java:441)
            at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82)
            at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:842)
            at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:2894)
            at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2527)
            at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1570)
            at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1534)
            at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:306)
            at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)
            at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:103)
            at
            org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:228)
            at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
            at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:156)
            at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
            at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
            at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
            at
            sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)
            at java.lang.reflect.Method.invoke(Method.java:391)
            at org.eclipse.core.launcher.Main.invokeFramework(Main.java:315)
            at org.eclipse.core.launcher.Main.basicRun(Main.java:268)
            at org.eclipse.core.launcher.Main.run(Main.java:947)
            at org.eclipse.core.launcher.Main.main(Main.java:931)
        </thetext>
        <comment>
            <comment_id>428638</comment_id>
            <comment_count>1</comment_count>
            <who>Martin Aeschlimann</who>
            <when>2005-04-11 12:26:50 -0400</when>
            <comment_text>do you have a reproducible scenario for this?

                The one I found was when removing a project. The editor can't even deregister
                the preference change listener. It seems that EclipsePreferences is a bit too
                restrictive here.

                Having the preference change listener registered, I don't see how I wouldn't
                keep a reference on it. DJ, what do you recommend?

                ProjectPreferences(EclipsePreferences).checkRemoved() line: 146
                ProjectPreferences(EclipsePreferences).removePreferenceChangeListener(IEclipsePreferences$IPreferenceChangeListener)
                line: 912
                JavaEditor$EclipsePreferencesAdapter.removePropertyChangeListener(IPropertyChangeListener)
                line: 355
                ChainedPreferenceStore$PropertyChangeListener.unregister() line: 82
                ChainedPreferenceStore.unregisterChildListeners() line: 552
                ChainedPreferenceStore.removePropertyChangeListener(IPropertyChangeListener)
                line: 137
                CompilationUnitEditor(AbstractTextEditor).dispose() line: 3105
            </comment_text>
        </comment>
        <comment>
            <comment_id>429589</comment_id>
            <comment_count>2</comment_count>
            <who>DJ Houghton</who>
            <when>2005-04-12 12:18:56 -0400</when>
            <comment_text>No reproducable test case, sorry.

                I am working on creating preference nodes that act like handles and forward the
                method calls to the real nodes but its not ready yet.

                In my code I have a helper method something like:
                IEclipsePreferences getPreferences() {
                return new InstanceScope().getNode("org.eclipse.core.resources");
                }
            </comment_text>
        </comment>
        <comment>
            <comment_id>429630</comment_id>
            <comment_count>3</comment_count>
            <who>Martin Aeschlimann</who>
            <when>2005-04-12 13:07:53 -0400</when>
            <comment_text>The listeners are a problem. To deregister I have to access the class again, to
                I keep a reference. To not deregister when I find out that the project doesn't
                exist anymore feels wrong.

                Can you have a look at the case in comment 1. Wouldn't it be better to not throw
                a 'IllegalStateException' when removing a listener? The preference store is
                probably a resource change listener on the project removal, and it seems it is
                before the Java editor that also reacts on that.

            </comment_text>
        </comment>
        <comment>
            <comment_id>429658</comment_id>
            <comment_count>4</comment_count>
            <who>DJ Houghton</who>
            <when>2005-04-12 13:37:08 -0400</when>
            <comment_text>There were previous problems with this case (bug 89262) where after a node was
                removed, it was impossible to remove the listener. I have since updated the spec
                to say that the listeners will be removed automatically when a node is removed.
                (IEclipsePreferences#removeNode)

                I tried to follow the patterns of the JDK APIs for the #remove*Listener method
                so that's why an exception is thrown in this case. (java.util.prefs.Preferences)

                Changing this behaviour would be an API change and would require permission from
                the PMC.

                You can also do something like:
                if (node.nodeExists(""))
                node.removeListner(listener);
            </comment_text>
        </comment>
        <comment>
            <comment_id>430035</comment_id>
            <comment_count>5</comment_count>
            <who>Dani Megert</who>
            <when>2005-04-13 04:46:21 -0400</when>
            <comment_text>*** Bug 91240 has been marked as a duplicate of this bug. ***</comment_text>
        </comment>
        <comment>
            <comment_id>430140</comment_id>
            <comment_count>6</comment_count>
            <who>Martin Aeschlimann</who>
            <when>2005-04-13 09:47:25 -0400</when>
            <comment_text>fixed &gt; 20050413

                Using now the indirection context.getNode(...) all the time. Even the project is
                not existing, the node still allows access and removing of listeners.

                This is obviously using a weakness in the preferences model. I filed bug 91269.

            </comment_text>
        </comment>
    </bug>
    <bug>
        <id>105738</id>
        <developer>Walter Harley</developer>
        <dup_id/>
        <creation_time>2005-08-01 16:52:00 -0400</creation_time>
        <product>JDT</product>
        <component>Text</component>
        <short_desc>[painting] Mark Occurrences: sporadic random highlights when editing javadoc</short_desc>
        <thetext>Mark Occurrences sometimes highlights random text while I am typing in a
            javadoc comment. I will attach a GIF image for an example. In this example, I
            was typing on the second line of the comment (the line ending in "thi"), and
            the highlights suddenly appeared. I cannot come up with any rationale for the
            areas that are highlighted; in particular, I had only changed a couple lines in
            this file, so it's not like it's highlighting tokens in a slightly out-of-date
            version of the file. Note that the highlights include whitespace,

            It is not reproducible, not even immediately after it happens. That is, if I
            am typing along and the random highlights suddenly appear, and I delete and
            then re-enter a few characters, they will not reappear. I have not been able
            to figure out a reliable repro case, but I'm not the only person on my team
            that is affected by this. Will add info if more becomes available.
        </thetext>
        <comment>
            <comment_id>511996</comment_id>
            <comment_count>1</comment_count>
            <who>Walter Harley</who>
            <when>2005-08-01 16:53:18 -0400</when>
            <comment_text>Created attachment 25535
                Screenshot showing random highlights
            </comment_text>
        </comment>
        <comment>
            <comment_id>513586</comment_id>
            <comment_count>2</comment_count>
            <who>Dani Megert</who>
            <when>2005-08-04 08:42:46 -0400</when>
            <comment_text>Please provide more details, see:
                http://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/platform-text-home/development/bug-incomplete.htm
            </comment_text>
        </comment>
        <comment>
            <comment_id>594395</comment_id>
            <comment_count>3</comment_count>
            <who>Marcus Vinicius Freitas Margarites</who>
            <when>2005-12-30 06:23:05 -0500</when>
            <comment_text>It also happens to me.
                I'm trying to create a pattern of occurrences, but still can't figure out what is wrong.

                Version: 3.2.0
                Build id: I20051215-1506
                WTP 1.0
            </comment_text>
        </comment>
        <comment>
            <comment_id>815705</comment_id>
            <comment_count>4</comment_count>
            <who>Walter Harley</who>
            <when>2006-10-23 21:18:43 -0400</when>
            <comment_text>Just adding info as per request. Still happening in 3.3 (build I20061003-0800). Happens quite
                commonly as I'm editing javadoc, but still with no pattern that I can discern, and never when I'm trying
                to make it happen :-(

                VM is 1.5.0_07. No plugins other than those that came with Eclipse SDK are installed. There are no
                relevant errors in the log.

                My machine is a Dell with two hyperthreaded Xeon processors, so it appears to the OS (WinXP SP2) as a
                four-processor machine. Video is "NVIDIA Quadro NVS with AGP8X".
            </comment_text>
        </comment>
        <comment>
            <comment_id>923229</comment_id>
            <comment_count>5</comment_count>
            <who>Dani Megert</who>
            <when>2007-04-04 10:57:11 -0400</when>
            <comment_text>Walter, you added this to the polish list. I can't do anything until I can reproduice myself.
                Sorry.
            </comment_text>
        </comment>
        <comment>
            <comment_id>923764</comment_id>
            <comment_count>6</comment_count>
            <who>Walter Harley</who>
            <when>2007-04-04 15:49:10 -0400</when>
            <comment_text>It has been reported here by at least three people. The bug badly impairs an otherwise very
                useful feature, during normal development usage, so it seems like something that is worth "polish"
                attention. My hope was that maybe if some attention was directed to the bug we could make some progress
                on it. Even you can't reproduce it locally, perhaps it is worth some dev time to either consider what
                the possible causes might be, or consider whether there is logging or tracing code that could be added
                to help track it down.

                Are you guys using dual-processor machines? I strongly suspect this is a threading issue, so it might
                not ever appear on single-processor machines.
            </comment_text>
        </comment>
        <comment>
            <comment_id>923788</comment_id>
            <comment_count>7</comment_count>
            <who>Dani Megert</who>
            <when>2007-04-04 15:59:11 -0400</when>
            <comment_text>I tried on our Linux box which is a real 2 processor machine. If you can provide steps that
                are closer to a reproducible case I can give it a try again.
            </comment_text>
        </comment>
        <comment>
            <comment_id>923817</comment_id>
            <comment_count>8</comment_count>
            <who>Walter Harley</who>
            <when>2007-04-04 16:19:17 -0400</when>
            <comment_text>I'll spend some time today trying to come up with a better repro. Maybe if I try hard enough
                that will scare the bug out of existence :-)
            </comment_text>
        </comment>
        <comment>
            <comment_id>923880</comment_id>
            <comment_count>9</comment_count>
            <who>Marcus Vinicius Freitas Margarites</who>
            <when>2007-04-04 17:15:14 -0400</when>
            <comment_text>It still happens to me, but, as Walter Harley said on comment #4, I am unable to define a
                pattern of occurrences. But still, this is a very common bug.


            </comment_text>
        </comment>
        <comment>
            <comment_id>926440</comment_id>
            <comment_count>10</comment_count>
            <who>Walter Harley</who>
            <when>2007-04-09 02:29:27 -0400</when>
            <comment_text>Created attachment 63236
                Another screenshot

                Here's another screenshot showing a defective highlight. This one is in a file that contains no javadoc
                at all (it's source code for a compiler test case). The highlight extended itself for as long as I
                typed, but when I moved focus away from the editor to another application and then back, the problem
                disappeared.

                I'm not sure what action I performed when the bad highlighting started - I've gotten so used to it
                happening that it doesn't register at first. Still no evident pattern to what causes it.
            </comment_text>
        </comment>
        <comment>
            <comment_id>1007127</comment_id>
            <comment_count>11</comment_count>
            <who>Dani Megert</who>
            <when>2007-06-22 09:59:25 -0400</when>
            <comment_text>Get rid of deprecated state.</comment_text>
        </comment>
        <comment>
            <comment_id>1007492</comment_id>
            <comment_count>12</comment_count>
            <who>Dani Megert</who>
            <when>2007-06-22 10:04:39 -0400</when>
            <comment_text>.</comment_text>
        </comment>
        <comment>
            <comment_id>1100457</comment_id>
            <comment_count>13</comment_count>
            <who>Dani Megert</who>
            <when>2007-11-14 05:31:43 -0500</when>
            <comment_text>We finally have a test case.</comment_text>
        </comment>
        <comment>
            <comment_id>1100460</comment_id>
            <comment_count>14</comment_count>
            <who>Dani Megert</who>
            <when>2007-11-14 05:32:24 -0500</when>
            <comment_text>*** Bug 115553 has been marked as a duplicate of this bug. ***</comment_text>
        </comment>
        <comment>
            <comment_id>1100462</comment_id>
            <comment_count>15</comment_count>
            <who>Dani Megert</who>
            <when>2007-11-14 05:32:40 -0500</when>
            <comment_text>*** Bug 209766 has been marked as a duplicate of this bug. ***</comment_text>
        </comment>
        <comment>
            <comment_id>1100464</comment_id>
            <comment_count>16</comment_count>
            <who>Dani Megert</who>
            <when>2007-11-14 05:34:40 -0500</when>
            <comment_text>Given:
                {
                int variable= 10;
                }

                1. select variable
                2. type 'i', wait, then type 'nteger'
                3. move cursor down &lt;-- important: move it to a place without Java element
                Is:
                i is orange rest is not updated, ever
            </comment_text>
        </comment>
        <comment>
            <comment_id>1108960</comment_id>
            <comment_count>17</comment_count>
            <who>Dani Megert</who>
            <when>2007-11-28 12:30:58 -0500</when>
            <comment_text>I've committed a fix but we have to see whether it removes the occurrence marks too eagerly.
            </comment_text>
        </comment>
    </bug>
    <bug>
        <id>90725</id>
        <developer>Nick Edgar</developer>
        <dup_id/>
        <creation_time>2005-04-07 17:30:00 -0400</creation_time>
        <product>JDT</product>
        <component>UI</component>
        <short_desc>TableColumn trim differs between platforms</short_desc>
        <thetext>build I20050405

            Due to platform-specific differences in trim on table columns, references to
            ColumnPixelData, and the TableLayoutComposite implementation, should be fixed up
            as per bug 90712.
        </thetext>
        <comment>
            <comment_id>441747</comment_id>
            <comment_count>1</comment_count>
            <who>Dirk Baeumer</who>
            <when>2005-05-02 10:22:19 -0400</when>
            <comment_text>Fixed.</comment_text>
        </comment>
    </bug>
    <bug>
        <id>93634</id>
        <developer>Dirk Baeumer</developer>
        <dup_id/>
        <creation_time>2005-05-04 08:12:00 -0400</creation_time>
        <product>JDT</product>
        <component>UI</component>
        <short_desc>[text edit] Try to share strings in undo object creation</short_desc>
        <thetext>Currently the text edit infrastructure reads the text to replace in a undo from
            the document. This has the downside that in massive name changes (e.g. rename,
            move, ...) we heavily duplicate the string to undo.
        </thetext>
        <comment>
            <comment_id>443066</comment_id>
            <comment_count>1</comment_count>
            <who>Dirk Baeumer</who>
            <when>2005-05-04 08:19:14 -0400</when>
            <comment_text>Created attachment 20672
                A patch for a simple string sharing
            </comment_text>
        </comment>
        <comment>
            <comment_id>443067</comment_id>
            <comment_count>2</comment_count>
            <who>Dirk Baeumer</who>
            <when>2005-05-04 08:20:48 -0400</when>
            <comment_text>Tom, can you please release this to org.eclipse.text. I will drop by.</comment_text>
        </comment>
        <comment>
            <comment_id>443092</comment_id>
            <comment_count>3</comment_count>
            <who>Tom Hofmann</who>
            <when>2005-05-04 09:04:01 -0400</when>
            <comment_text>released &gt; 20050504</comment_text>
        </comment>
        <comment>
            <comment_id>443332</comment_id>
            <comment_count>4</comment_count>
            <who>Dirk Baeumer</who>
            <when>2005-05-04 12:44:31 -0400</when>
            <comment_text>Closing as fixed.</comment_text>
        </comment>
    </bug>
    <bug>
        <id>111754</id>
        <developer>Juergen Weber</developer>
        <dup_id/>
        <creation_time>2005-10-06 08:37:00 -0400</creation_time>
        <product>JDT</product>
        <component>UI</component>
        <short_desc>[open type] Open Type Dialog cannot be closed</short_desc>
        <thetext>Sometimes after entering anything in open type dialog, the dialog cannot be
            closed any more, neither with OK, Cancel or the Window close cross.

            I have to kill Eclipse with task manager.

            This does happen only occasionally and I cannot always reproduce it, but there
            seems to be something very wrong.
        </thetext>
        <comment>
            <comment_id>541682</comment_id>
            <comment_count>1</comment_count>
            <who>Juergen Weber</who>
            <when>2005-10-06 08:45:07 -0400</when>
            <comment_text>Found a way to always reproduce it:

                Select another Java source buffer with the buffer selector &gt;&gt;
                (which takes abnormally long, about 10s), this step is necessary.

                Afterwards do C-S-T, after the Type is found (and not before), the dialog cannot
                be closed any more.
            </comment_text>
        </comment>
        <comment>
            <comment_id>542965</comment_id>
            <comment_count>2</comment_count>
            <who>Martin Aeschlimann</who>
            <when>2005-10-08 11:12:22 -0400</when>
            <comment_text>With source buffer you mean Javae editor?

                Can you start Eclipse form a console and press CTRL + break in the console when
                this happens?
            </comment_text>
        </comment>
        <comment>
            <comment_id>543680</comment_id>
            <comment_count>3</comment_count>
            <who>Dirk Baeumer</who>
            <when>2005-10-11 08:44:08 -0400</when>
            <comment_text>Juergen, I can't reproduce the problem. Can you please provide more detailed
                steps (best a zipped workspace with some files revealing the problem).
                Additionally can you please answer the following questions:

                - is Eclipse frozen or does the dialog not close. If you press the Cancel or OK
                button does the button responed to the click or is the UI frozen. If it is
                frozen can you please create a VM dump. This will help a lot to track down the
                problem.

                - is the anything in the log file ?

                - are you using a different XML library (for example xerces) than the one
                provided by the JDK. There is a know issue here which prevents the dialog
                from closing in this case (see bug 106447)
            </comment_text>
        </comment>
        <comment>
            <comment_id>543908</comment_id>
            <comment_count>4</comment_count>
            <who>Juergen Weber</who>
            <when>2005-10-11 13:00:15 -0400</when>
            <comment_text>After I rebootet XP I could not reproduce the bug for some time and then not
                always. I have a feeling it has something to do with the Clearcase plugin.
                Anyway, the vm dump will show. But how do I create it in Windows XP?
            </comment_text>
        </comment>
        <comment>
            <comment_id>543923</comment_id>
            <comment_count>5</comment_count>
            <who>Dirk Baeumer</who>
            <when>2005-10-11 13:36:44 -0400</when>
            <comment_text>Start Eclipse using the following command from a Windows command prompt,
                replacing eclipse_install and jdk_install with the path to the corresponding
                installations on disk:

                C:\eclipse_install\eclipse.exe -vm C:\jdk_install\bin\java.exe -vmargs -Xms30M
                -Xmx200M

                when the situation occurs simple activate the command window and press
                Ctrl+Break. This will print the VM dump to the command window. Please make sure
                you increase the height of the screen buffer size via the properties dialog of
                the command window (Layout tab) so that the dump will not be clipped.
            </comment_text>
        </comment>
        <comment>
            <comment_id>553887</comment_id>
            <comment_count>6</comment_count>
            <who>Dirk Baeumer</who>
            <when>2005-10-31 06:30:00 -0500</when>
            <comment_text>Closing as works for me since I can't reproduce the bug. Juergen, if you can
                provide the requested information please reopen.
            </comment_text>
        </comment>
        <comment>
            <comment_id>567020</comment_id>
            <comment_count>7</comment_count>
            <who>Juergen Weber</who>
            <when>2005-11-18 07:55:23 -0500</when>
            <comment_text>Created attachment 30219
                threaddump

                D:\eclipse&gt;D:\eclipse\eclipse.exe -data D:\GBOBWorkspace -vm
                D:\jdk1.5.0_05\bin\java.exe -vmargs -XX:+UseParallelGC -server
            </comment_text>
        </comment>
        <comment>
            <comment_id>567021</comment_id>
            <comment_count>8</comment_count>
            <who>Juergen Weber</who>
            <when>2005-11-18 07:55:42 -0500</when>
            <comment_text>OK, I could reproduce it (and had started eclipse from a console window, too 8-)

                I'll attach the thread dump.

                Also, in the logs is the stacktrace below, I don't know if it has anything todo
                with the problem. It is kind of strange, because there are the weblogic classes.
                Classpath DOS env variable is definitely empty, I ran eclipse.exe


                !ENTRY org.eclipse.ui 4 4 2005-11-18 13:46:10.523
                !MESSAGE Unhandled event loop exception

                !ENTRY org.eclipse.ui 4 0 2005-11-18 13:46:10.523
                !MESSAGE org/apache/xalan/processor/TransformerFactoryImpl
                !STACK 0
                java.lang.NoClassDefFoundError: org/apache/xalan/processor/TransformerFactoryImpl
                at
                weblogic.xml.jaxp.RegistryTransformerFactory.&lt;init&gt;(RegistryTransformerFactory.java:62)
                at
                weblogic.xml.jaxp.RegistrySAXTransformerFactory.&lt;init&gt;(RegistrySAXTransformerFactory.java:12)
                at sun.reflect.GeneratedConstructorAccessor10.newInstance(Unknown Source)
                at
                sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
                at java.lang.reflect.Constructor.newInstance(Constructor.java:494)
                at java.lang.Class.newInstance0(Class.java:350)
                at java.lang.Class.newInstance(Class.java:303)
                at javax.xml.transform.FactoryFinder.newInstance(FactoryFinder.java:100)
                at javax.xml.transform.FactoryFinder.findJarServiceProvider(FactoryFinder.java:278)
                at javax.xml.transform.FactoryFinder.find(FactoryFinder.java:185)
                at javax.xml.transform.TransformerFactory.newInstance(TransformerFactory.java:103)
                at
                org.eclipse.jdt.internal.corext.util.TypeInfoHistory.save(TypeInfoHistory.java:374)
                at
                org.eclipse.jdt.internal.corext.util.TypeInfoHistory.save(TypeInfoHistory.java:337)
                at
                org.eclipse.jdt.internal.ui.dialogs.TypeSelectionDialog2.close(TypeSelectionDialog2.java:177)
                at
                org.eclipse.jdt.internal.ui.dialogs.OpenTypeSelectionDialog2.close(OpenTypeSelectionDialog2.java:94)
                at org.eclipse.jface.dialogs.Dialog.okPressed(Dialog.java:856)
                at
                org.eclipse.ui.dialogs.SelectionStatusDialog.okPressed(SelectionStatusDialog.java:142)
                at org.eclipse.jface.dialogs.Dialog.buttonPressed(Dialog.java:409)
                at org.eclipse.jface.dialogs.Dialog$2.widgetSelected(Dialog.java:556)
                at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:90)
                at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)
                at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:843)
                at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3080)
                at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2713)
                at org.eclipse.jface.window.Window.runEventLoop(Window.java:809)
                at org.eclipse.jface.window.Window.open(Window.java:787)
                at
                org.eclipse.jdt.internal.ui.dialogs.TypeSelectionDialog2.open(TypeSelectionDialog2.java:173)
                at org.eclipse.jdt.internal.ui.actions.OpenTypeAction.run(OpenTypeAction.java:57)
                at org.eclipse.jdt.internal.ui.actions.OpenTypeAction.run(OpenTypeAction.java:78)
                at org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:246)
                at org.eclipse.ui.internal.WWinPluginAction.runWithEvent(WWinPluginAction.java:223)
                at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:117)
                at org.eclipse.core.commands.Command.execute(Command.java:311)
                at
                org.eclipse.core.commands.ParameterizedCommand.execute(ParameterizedCommand.java:396)
                at
                org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:459)
                at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:781)
                at
                org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:828)
                at
                org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:550)
                at
                org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:493)
                at
                org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:117)
                at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)
                at org.eclipse.swt.widgets.Display.filterEvent(Display.java:917)
                at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:842)
                at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:867)
                at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:852)
                at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:880)
                at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:876)
                at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1190)
                at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:3135)
                at org.eclipse.swt.widgets.Control.windowProc(Control.java:3038)
                at org.eclipse.swt.widgets.Display.windowProc(Display.java:3706)
                at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
                at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1656)
                at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2711)
                at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1699)
                at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1663)
                at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:367)
                at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)
                at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:103)
                at
                org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:226)
                at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:376)
                at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:163)
                at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
                at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
                at
                sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
                at java.lang.reflect.Method.invoke(Method.java:585)
                at org.eclipse.core.launcher.Main.invokeFramework(Main.java:334)
                at org.eclipse.core.launcher.Main.basicRun(Main.java:278)
                at org.eclipse.core.launcher.Main.run(Main.java:973)
                at org.eclipse.core.launcher.Main.main(Main.java:948)
            </comment_text>
        </comment>
        <comment>
            <comment_id>567033</comment_id>
            <comment_count>9</comment_count>
            <who>Dirk Baeumer</who>
            <when>2005-11-18 08:22:17 -0500</when>
            <comment_text>Juergen,

                thanks for providing the additional information.

                As outlined in bug 106447 the problem is a misconfiguration of the XML parser
                you are using. The class org/apache/xalan/processor/TransformerFactoryImpl can't
                be found.

                I can't do anything against the misconfiguration, however I added protection
                code to the dialog that it closes even if this situation occurs. The protection
                code went into 3.2 M3.
            </comment_text>
        </comment>
        <comment>
            <comment_id>567371</comment_id>
            <comment_count>10</comment_count>
            <who>Juergen Weber</who>
            <when>2005-11-18 12:50:48 -0500</when>
            <comment_text>But how can I as user misconfigure the XML parser? Eclipse JDT is supposed to
                come with all the plugins it needs, so if the parser fails, it is a bug in the
                eclipse product (either for not delivering a parser or not configuring it right).

                But if it is a misconfigurion induced by me, it is still a bug of Eclipse,
                because the plugin system is supposed to shield the plugins from each other, so
                my user plugins are not to affect JDT plugins.
            </comment_text>
        </comment>
        <comment>
            <comment_id>567386</comment_id>
            <comment_count>11</comment_count>
            <who>Dirk Baeumer</who>
            <when>2005-11-18 13:04:19 -0500</when>
            <comment_text>No, since Eclipse 3.0 we don't have our own XML parser anymore. We take the one
                that is part of the JDK installation.

                There are two ways to overrule the default parser:

                - installing one in the JDK (see bug 106447)
                - a plug-in contributed to Eclipse installs again a misconfigured XML parser.

                From the stack trace it looks like that their is an XML parser from weblogic
                that causes the problem. And this is not under Eclipse SDK control.

                Do you have an additional weblogic plug-in installed ?
            </comment_text>
        </comment>
        <comment>
            <comment_id>567387</comment_id>
            <comment_count>12</comment_count>
            <who>Dirk Baeumer</who>
            <when>2005-11-18 13:06:30 -0500</when>
            <comment_text>Regarding your point: "the plugin system is supposed to shield"

                This is not possible since the plug of a XML parser happens on JDK level over
                which we don't have control. We only shield plug-ins against each other.
            </comment_text>
        </comment>
        <comment>
            <comment_id>567391</comment_id>
            <comment_count>13</comment_count>
            <who>Juergen Weber</who>
            <when>2005-11-18 13:13:59 -0500</when>
            <comment_text>(In reply to comment #11)

                I did not have a weblogic plug-in installed, but I was remote debugging a WLS
                EJB and running a local WLS client (from a Java project with weblogic.jar in the
                classpath) in the console.
                If that is the reason for another XML parser being drawn in, this is a too easy
                way to break JDT and should be fixed.
            </comment_text>
        </comment>
        <comment>
            <comment_id>567448</comment_id>
            <comment_count>14</comment_count>
            <who>Dirk Baeumer</who>
            <when>2005-11-18 14:00:01 -0500</when>
            <comment_text>As you can see the from the stack trace produced by Eclipse the weblogic XML
                parser is available inside the Eclipse VM.

                If you don't have an additional plug-in install in Eclipse then the only way
                that parser can end up in the Eclipse VM is by installing it into the JDK location.

                Can you try the following:

                - a fresh Eclipse install without additional plug-ins
                - a fresh VM install or a different VM that is not used to debug your
                application

                If then there is still the web logic XML parser available in the Eclipse VM
                there is really something strange.
            </comment_text>
        </comment>
        <comment>
            <comment_id>568726</comment_id>
            <comment_count>15</comment_count>
            <who>Juergen Weber</who>
            <when>2005-11-21 08:06:50 -0500</when>
            <comment_text>weblogic.jar is nowhere on the eclipse classpath, only on the classpath of a java project
                within eclipse.

                I could imagine that on running the project once, weblogic.jar somehow sets the system property
                javax.xml.transform.TransformerFactory which javax.xml.transform.TransformerFactory.newInstance() uses.
                And afterwards if the eclipse gui code gets called, it gets the wrong transformer.

                So we have the situation that a JDT project can break the eclipse runtime.

                Maybe the gui code should check that it uses the correct transformer:

                savingTransformer
                {
                OpenTypeDialog();
                }
            </comment_text>
        </comment>
    </bug>
    <bug>
        <id>86252</id>
        <developer>David Audel</developer>
        <dup_id/>
        <creation_time>2005-02-23 07:49:00 -0500</creation_time>
        <product>JDT</product>
        <component>Text</component>
        <short_desc>[content asssist] New completion kind CompletionProposal.ANNOTATION_ATTRIBUTE_REF</short_desc>
        <thetext>I released a new completion kind in Jdtcore/head:
            CompletionProposal.ANNOTATION_ATTRIBUTE_REF

            This kind of proposals will be used to complete annotation's attribute reference.
            ---------------------------
            public @interface Annot {
            String foo1();
            String foo2();
            }
            // complete at | location
            @Annot(foo| = "")
            public class Test {
            }
            ---------------------------

            /**
            * Completion is a reference to annotation's attribute.
            * This kind of completion might occur in a context like
            * &amp;lt;code&amp;gt;"@Annot(attr^=value)"&amp;lt;/code&amp;gt; and complete it to
            * &amp;lt;code&amp;gt;"@Annot(attribute^=value)"&amp;lt;/code&amp;gt;.
            * &amp;lt;p&amp;gt;
            * The following additional context information is available
            * for this kind of completion proposal at little extra cost:
            * &amp;lt;ul&amp;gt;
            * &amp;lt;li&amp;gt;{@link #getDeclarationSignature()} -
            * the type signature of the annotation that declares the attribute that is
            referenced
            * &amp;lt;/li&amp;gt;
            * &amp;lt;li&amp;gt;{@link #getFlags()} -
            * the modifiers flags of the attribute that is referenced
            * &amp;lt;/li&amp;gt;
            * &amp;lt;li&amp;gt;{@link #getName()} -
            * the simple name of the attribute that is referenced
            * &amp;lt;/li&amp;gt;
            * &amp;lt;li&amp;gt;{@link #getSignature()} -
            * the type signature of the attribute's type (as opposed to the
            * signature of the type in which the referenced attribute
            * is declared)
            * &amp;lt;/li&amp;gt;
            * &amp;lt;/ul&amp;gt;
            * &amp;lt;/p&amp;gt;
            *
            * @see #getKind()
            */
            public static final int ANNOTATION_ATTRIBUTE_REF = 13;

            This kind of proposal is similar to FIELD_REF and attribute declaration is
            similar to method declaration (use METHOD_REF ?). But use FIELD_REF or
            METHOD_REF to propose attribute would create ambiguous proposals (unable to
            recognize a real field ref from an attribut ref).

            Currently only the API is released and CompletionEngine does not propose this
            kind of proposal.
        </thetext>
        <comment>
            <comment_id>442497</comment_id>
            <comment_count>1</comment_count>
            <who>Tom Hofmann</who>
            <when>2005-05-03 09:57:25 -0400</when>
            <comment_text>has been fixed a while ago.</comment_text>
        </comment>
    </bug>
</bugs>